{
  "version": 3,
  "sources": ["../../src/lib/struct-fu/lib.js", "../../node_modules/@datkat21/html/dist/html.js", "../../src/components/Slider.ts", "../../src/components/Select.ts", "../../src/types/struct/NnMiiCharInfo.ts", "../../src/util/parseString.ts", "../../src/components/Header.ts", "../../src/components/Array.ts", "../../src/components/String.ts", "../../src/util/propsToComponentCollection.ts", "../../src/util/CharInfoProps.ts", "../../src/util/rendererPropLists.ts", "../../src/types/struct/FFLStoreData.ts", "../../src/types/struct/RFLStoreData.ts", "../../src/lib/conversion/Ver3ToVer1.ts", "../../src/main.ts"],
  "sourcesContent": [
    "// Arian's fork of struct-fu ported to browser JS.\n// https://github.com/ariankordi/struct-fu\n\n/**\n * A library for defining structs to convert between JSON and binary.\n * Supports numbers, bytes, strings, and bitfields.\n * Compatible with browsers down to Safari 5.1.\n *\n * @namespace\n */\nvar _ = {};\n\n// Add ECMA262-5 method binding if not supported natively\n// https://github.com/ReactNativeNews/react-native-newsletter/blob/93016f62af32d97cc009f991d4f7c3c7155a4f26/ie.js#L8\nif (!('bind' in Function.prototype)) {\n    Function.prototype.bind = function (owner) {\n        var that = this;\n        if (arguments.length <= 1) {\n            return function () {\n                return that.apply(owner, arguments);\n            };\n        } else {\n            var args = Array.prototype.slice.call(arguments, 1);\n            return function () {\n                return that.apply(owner, arguments.length === 0 ? args : args.concat(Array.prototype.slice.call(arguments)));\n            };\n        }\n    };\n}\n\n\n/**\n * Creates a new buffer backed by an ArrayBuffer.\n *\n * @param {number} size - The size of the buffer in bytes.\n * @returns {Uint8Array} A new Uint8Array of the specified size.\n */\nfunction newBuffer(size) {\n    return new Uint8Array(new ArrayBuffer(size));\n}\n\n/**\n * Extends an object with properties from subsequent objects.\n *\n * @param {Object} obj - The target object to extend.\n * @returns {Object} The extended object.\n */\nfunction extend(obj) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    args.forEach(function (ext) {\n        Object.keys(ext).forEach(function (key) {\n            obj[key] = ext[key];\n        });\n    });\n    return obj;\n}\n\n/**\n * Adds a bitfield's size to the current cursor.\n *\n * @param {Object} ctr - The current cursor with bytes and bits.\n * @param {Object} f - The field to add.\n * @returns {Object} The updated cursor.\n */\nfunction addField(ctr, f) {\n    if ('width' in f) {\n        ctr.bits = (ctr.bits || 0) + f.width;\n        while (ctr.bits > 7) {\n            ctr.bytes += 1;\n            ctr.bits -= 8;\n        }\n    } else if (!ctr.bits) {\n        ctr.bytes += f.size;\n    } else {\n        throw Error(\"Improperly aligned bitfield before field: \"+f.name);\n    }\n    return ctr;\n}\n\n/**\n * Converts a field into an array field if a count is provided.\n *\n * @param {Object} f - The field to arrayize.\n * @param {number} count - The number of elements in the array.\n * @returns {Object} The arrayized field.\n */\nfunction arrayizeField(f, count) {\n    var f2 = (typeof count === 'number') ? extend({\n        name: f.name,\n        field: f,\n        /**\n         * Unpacks an array of values from bytes.\n         *\n         * @param {ArrayBuffer|Uint8Array} buf - The buffer to read from.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {Array} The unpacked array of values.\n         */\n        valueFromBytes: function (buf, off) {\n            off || (off = {bytes:0, bits:0});\n            var arr = new Array(count);\n            for (var idx = 0, len = arr.length; idx < len; idx += 1) {\n                arr[idx] = f.valueFromBytes(buf, off);\n            }\n            return arr;\n        },\n        /**\n         * Packs an array of values into bytes.\n         *\n         * @param {Array} arr - The array of values to pack.\n         * @param {ArrayBuffer|Uint8Array} [buf] - The buffer to write to.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {ArrayBuffer|Uint8Array} The buffer with packed data.\n         */\n        bytesFromValue: function (arr, buf, off) {\n            arr || (arr = new Array(count));\n            buf || (buf = newBuffer(this.size));\n            off || (off = {bytes:0, bits:0});\n            for (var idx = 0, len = Math.min(arr.length, count); idx < len; idx += 1) {\n                f.bytesFromValue(arr[idx], buf, off);\n            }\n            while (idx++ < count) addField(off, f);\n            return buf;\n        }\n    }, ('width' in f) ? {width: f.width * count} : {size: f.size * count}) : f;\n    f2.pack = f2.bytesFromValue;\n    f2.unpack = f2.valueFromBytes;\n    return f2;\n}\n\n/*\n * Defines a new structure with the given fields.\n *\n * @param {string} [name] - The name of the structure.\n * @param {Array} fields - The array of field definitions.\n * @param {number} [count] - The number of structures in an array.\n * @returns {Object} The defined structure with pack and unpack methods.\n */\n_.struct = function (name, fields, count) {\n    if (typeof name !== 'string') {\n        count = fields;\n        fields = name;\n        name = null;\n    }\n\n    var _size = {bytes:0, bits:0},\n        _padsById = Object.create(null),\n        fieldsObj = fields.reduce(function (obj, f) {\n            if ('_padTo' in f) {\n                // HACK: we really should just make local copy of *all* fields\n                f._id || (f._id = 'id' + Math.random().toFixed(20).slice(2)); // WORKAROUND: https://github.com/tessel/runtime/issues/716\n                var _f = _padsById[f._id] = (_size.bits) ? {\n                    width: 8*(f._padTo - _size.bytes) - _size.bits\n                } : {\n                    size: f._padTo - _size.bytes\n                };\n                if ((_f.width !== undefined && _f.width < 0) || (_f.size !== undefined && _f.size < 0)) {\n                    var xtraMsg = (_size.bits) ? (\" and \" + _size.bits + \" bits\") : '';\n                    throw Error(\"Invalid .padTo(\" + f._padTo + \") field, struct is already \" + _size.bytes + \" byte(s)\" + xtraMsg + \"!\");\n                }\n                f = _f;\n            }\n            else if (f._hoistFields) {\n                Object.keys(f._hoistFields).forEach(function (name) {\n                    var _f = Object.create(f._hoistFields[name]);\n                    if ('width' in _f) {\n                        _f.offset = { bytes: _f.offset.bytes + _size.bytes, bits: _f.offset.bits };\n                    } else {\n                        _f.offset += _size.bytes;\n                    }\n                    obj[name] = _f;\n                });\n            }\n            else if (f.name) {\n                f = Object.create(f);           // local overrides\n                f.offset = ('width' in f) ? {bytes:_size.bytes,bits:_size.bits} : _size.bytes,\n                obj[f.name] = f;\n            }\n            addField(_size, f);\n            return obj;\n        }, {});\n    if (_size.bits) throw Error(\"Improperly aligned bitfield at end of struct: \"+name);\n\n    return arrayizeField({\n        /**\n         * Unpacks a structure from bytes.\n         *\n         * @param {ArrayBuffer|Uint8Array} buf - The buffer to read from.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {Object} The unpacked structure.\n         */\n        valueFromBytes: function (buf, off) {\n            off || (off = {bytes:0, bits:0});\n            var obj = {};\n            fields.forEach(function (f) {\n                if ('_padTo' in f) return addField(off, _padsById[f._id]);\n\n                var value = f.valueFromBytes(buf, off);\n                if (f.name) obj[f.name] = value;\n                else if (typeof value === 'object') extend(obj, value);\n            });\n            return obj;\n        },\n        /**\n         * Packs a structure into bytes.\n         *\n         * @param {Object} obj - The object containing values to pack.\n         * @param {ArrayBuffer|Uint8Array} [buf] - The buffer to write to.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {ArrayBuffer|Uint8Array} The buffer with packed data.\n         */\n        bytesFromValue: function (obj, buf, off) {\n            obj || (obj = {});\n            buf || (buf = newBuffer(this.size));\n            off || (off = {bytes:0, bits:0});\n            fields.forEach(function (f) {\n                if ('_padTo' in f) return addField(off, _padsById[f._id]);\n\n                var value = (f.name) ? obj[f.name] : obj;\n                f.bytesFromValue(value, buf, off);\n            });\n            return buf;\n        },\n        _hoistFields: (!name) ? fieldsObj : null,\n        fields: fieldsObj,\n        size: _size.bytes,\n        name: name\n    }, count);\n};\n\n/**\n * Reads a truncated unsigned 32-bit integer from a buffer. Used in valueFromBytes for bitfields.\n *\n * @param {ArrayBuffer|Uint8Array} buffer - The buffer to read from.\n * @param {number} offset - The byte offset to start reading.\n * @param {boolean} littleEndian - Indicates whether to read little-endian.\n * @returns {number} The read unsigned 32-bit integer.\n */\nfunction truncatedReadUInt32(buffer, offset, littleEndian) {\n    var bytes = buffer instanceof ArrayBuffer ? new Uint8Array(buffer) : buffer;\n    var availableBytes = bytes.length - offset;\n    var view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n\n    if (availableBytes >= 4) {\n        return view.getUint32(offset, littleEndian);\n    } else if (availableBytes === 3) {\n        var first = view.getUint16(offset, littleEndian);\n        var second = view.getUint8(offset + 2);\n        return littleEndian\n            ? ((second << 16) + first) >>> 0\n            : ((first << 8) + second) << 8 >>> 0;\n    } else if (availableBytes === 2) {\n        return view.getUint16(offset, littleEndian) << (littleEndian ? 0 : 16) >>> 0;\n    } else if (availableBytes === 1) {\n        return view.getUint8(offset) << (littleEndian ? 0 : 24) >>> 0;\n    } else {\n        return 0x0;\n    }\n}\n\n/**\n * Writes a truncated unsigned 32-bit integer to a buffer. Used in bytesFromValue for bitfields.\n *\n * @param {ArrayBuffer|Uint8Array} buffer - The buffer to write to.\n * @param {number} offset - The byte offset to start writing.\n * @param {number} data - The unsigned 32-bit integer to write.\n * @param {boolean} littleEndian - Indicates whether to write little-endian.\n */\nfunction truncatedWriteUInt32(buffer, offset, data, littleEndian) {\n    var bytes = buffer instanceof ArrayBuffer ? new Uint8Array(buffer) : buffer;\n    var availableBytes = bytes.length - offset;\n    var view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n\n    if (availableBytes >= 4) {\n        view.setUint32(offset, data, littleEndian);\n    } else if (availableBytes === 3) {\n        if (littleEndian) {\n            view.setUint8(offset, data & 0xff);\n            view.setUint16(offset + 1, data >>> 8, littleEndian);\n        } else {\n            view.setUint16(offset, data >>> 16, littleEndian);\n            view.setUint8(offset + 2, (data >>> 8) & 0xff);\n        }\n    } else if (availableBytes === 2) {\n        view.setUint16(offset, littleEndian ? data & 0xffff : data >>> 16, littleEndian);\n    } else if (availableBytes === 1) {\n        view.setUint8(offset, littleEndian ? data & 0xff : data >>> 24);\n    }\n}\n\n/**\n * Defines a padding field up to the specified offset.\n *\n * @param {number} off - The byte offset to pad to.\n * @returns {Object} The padding field definition.\n */\n_.padTo = function (off) {\n    return {_padTo:off};\n};\n\n\n// NOTE: bitfields must be embedded in a struct (C/C++ share this limitation)\n\nvar FULL = 0xFFFFFFFF;\n\n/**\n * Defines a big-endian bitfield within a structure.\n *\n * @param {string} name - The name of the bitfield.\n * @param {number} [width=1] - The width of the bitfield in bits.\n * @param {number} [count] - The number of bitfields in an array.\n * @returns {Object} The defined bitfield.\n */\nfunction bitfield(name, width, count) {\n    var littleEndian = false; // Passed to truncatedRead/WriteUInt32\n\n    width || (width = 1);\n    // NOTE: width limitation is so all values will align *within* a 4-byte word\n    if (width > 24) throw Error(\"Bitfields support a maximum width of 24 bits.\");\n    var impl = this,\n        mask = FULL >>> (32 - width);\n    return arrayizeField({\n        /**\n         * Unpacks a bitfield value from bytes.\n         *\n         * @param {ArrayBuffer|Uint8Array} buf - The buffer to read from.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {number} The unpacked bitfield value.\n         */\n        valueFromBytes: function (buf, off) {\n            off || (off = {bytes:0, bits:0});\n            var end = (off.bits || 0) + width,\n                word = truncatedReadUInt32(buf, off.bytes, littleEndian) || 0,\n                over = word >>> (32 - end);\n            addField(off, this);\n            return impl.b2v.call(this, over & mask);\n        },\n        /**\n         * Packs a bitfield value into bytes.\n         *\n         * @param {number} val - The value to pack.\n         * @param {ArrayBuffer|Uint8Array} buf - The buffer to write to.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {ArrayBuffer|Uint8Array} The buffer with packed data.\n         */\n        bytesFromValue: function (val, buf, off) {\n            val = impl.v2b.call(this, val || 0);\n            off || (off = {bytes:0, bits:0});\n            var end = (off.bits || 0) + width,\n                word = truncatedReadUInt32(buf, off.bytes, littleEndian) || 0,\n                zero = mask << (32 - end),\n                over = (val & mask) << (32 - end);\n            word &= ~zero;\n            word |= over;\n            word >>>= 0;      // WORKAROUND: https:thub.com/tessel/runtime/issues/644\n            truncatedWriteUInt32(buf, off.bytes, word, littleEndian);\n            addField(off, this);\n            return buf;\n        },\n        width: width,\n        name: name\n    }, count);\n}\n\n\n/**\n * Defines a little-endian bitfield within a structure.\n * This is meant to read and write bitfields inline with the behavior of GCC.\n *\n * @param {string} name - The name of the bitfield.\n * @param {number} [width=1] - The width of the bitfield in bits.\n * @param {number} [count] - The number of bitfields in an array.\n * @returns {Object} The defined bitfield.\n */\nfunction bitfieldLE(name, width, count) {\n    width || (width = 1);\n    if (width > 24) throw Error(\"Bitfields support a maximum width of 24 bits.\");\n\n    // The default bitfield type uses \"top bits\" of a 32-bit read.\n    // We define a new \"cbitLE\" approach that uses the lower bits first.\n    var impl = this,\n        mask = (0xFFFFFFFF >>> (32 - width)) >>> 0; // Mask of (width) bits\n\n    return arrayizeField({\n        /**\n         * Unpacks a bitfield value from bytes.\n         *\n         * @param {ArrayBuffer|Uint8Array} buf - The buffer to read from.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {number} The unpacked bitfield value.\n         */\n        valueFromBytes: function(buf, off) {\n            off || (off = {bytes:0, bits:0});\n\n            // Read 32 bits from the buffer in \"true\" little-endian\n            // (so bytes[0] is the lowest-order bits in that 32)\n            var word = truncatedReadUInt32(buf, off.bytes, true) >>> 0;\n\n            // The field bits we want are from \"off.bits\" up through\n            // \"off.bits + width - 1\" in that 32. That means:\n            var shift = off.bits;  // how many bits already used in that 32\n            var result = (word >>> shift) & mask;\n\n            // Move offset forward by 'width' bits\n            addField(off, this);\n\n            return impl.b2v.call(this, result);\n        },\n\n        /**\n         * Packs a bitfield value into bytes.\n         *\n         * @param {number} val - The value to pack.\n         * @param {ArrayBuffer|Uint8Array} buf - The buffer to write to.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {ArrayBuffer|Uint8Array} The buffer with packed data.\n         */\n        bytesFromValue: function(val, buf, off) {\n            off || (off = {bytes:0, bits:0});\n\n            // read existing 32 bits\n            var word = truncatedReadUInt32(buf, off.bytes, true) >>> 0;\n\n            var shift = off.bits;\n            // Clear out the bits in \"mask << shift\"\n            var clearMask = ~(mask << shift) >>> 0;\n            word &= clearMask;\n\n            var toStore = (impl.v2b.call(this, val) & mask) << shift;\n            word |= (toStore >>> 0);\n\n            truncatedWriteUInt32(buf, off.bytes, word >>> 0, true);\n\n            addField(off, this);\n            return buf;\n        },\n\n        width: width,\n        name: name\n    }, count);\n}\n\n_.bool = function (name, count) {\n    return bitfield.call({\n        /**\n         * Converts a bitfield to a boolean.\n         *\n         * @param {number} b - The bitfield value.\n         * @returns {boolean} The boolean representation.\n         */\n        b2v: function (b) { return Boolean(b); },\n        /**\n         * Converts a boolean to a bitfield.\n         *\n         * @param {boolean} v - The boolean value.\n         * @returns {number} The bitfield representation.\n         */\n        v2b: function (v) { return (v) ? FULL : 0; }\n    }, name, 1, count);\n\n};\n\n_.ubit = bitfield.bind({\n    /**\n     * Converts a bitfield to a value.\n     *\n     * @param {number} b - The bitfield value.\n     * @returns {number} The numeric value.\n     */\n    b2v: function (b) { return b; },\n    /**\n     * Converts a value to a bitfield.\n     *\n     * @param {number} v - The numeric value.\n     * @returns {number} The bitfield representation.\n     */\n    v2b: function (v) { return v; }\n});\n\n/**\n * Defines a little-endian bitfield.\n *\n * @param {string} name - The name of the bitfield.\n * @param {number} [width=1] - The width of the bitfield in bits.\n * @param {number} [count] - The number of bitfields in an array.\n * @returns {Object} The defined little-endian bitfield.\n */\n_.ubitLE = bitfieldLE.bind({\n    /**\n     * Converts a bitfield to a little-endian value.\n     *\n     * @param {number} b - The bitfield value.\n     * @returns {number} The little-endian numeric value.\n     */\n    b2v: function (b) { return b; },\n    /**\n     * Converts a little-endian value to a bitfield.\n     *\n     * @param {number} v - The little-endian numeric value.\n     * @returns {number} The bitfield representation.\n     */\n    v2b: function (v) { return v; }\n});\n\n/**\n * Defines a signed bitfield.\n *\n * @param {string} name - The name of the bitfield.\n * @param {number} [width=1] - The width of the bitfield in bits.\n * @param {number} [count] - The number of bitfields in an array.\n * @returns {Object} The defined signed bitfield.\n */\n_.sbit = bitfield.bind({        // TODO: handle sign bit…\n    /**\n     * Converts a bitfield to a signed value.\n     *\n     * @param {number} b - The bitfield value.\n     * @returns {number} The signed numeric value.\n     */\n    b2v: function (b) {\n        var m = 1 << (this.width-1),\n            s = b & m;\n        return (s) ? -(b &= ~m) : b;\n    },\n    /**\n     * Converts a signed value to a bitfield.\n     *\n     * @param {number} v - The signed numeric value.\n     * @returns {number} The bitfield representation.\n     */\n    v2b: function (v) {\n        var m = 1 << (this.width-1),\n            s = (v < 0);\n        return (s) ? (-v | m) : v;\n    }\n});\n\n/**\n * Defines a byte-based field within a structure.\n *\n * @param {string|number} name - The name of the bytefield or its size if name is omitted.\n * @param {number} [size=1] - The size of the bytefield in bytes.\n * @param {number} [count] - The number of bytefields in an array.\n * @returns {Object} The defined bytefield.\n */\nfunction bytefield(name, size, count) {\n    if (typeof name !== 'string') {\n        count = size;\n        size = name;\n        name = null;\n    }\n    size = (typeof size === 'number') ? size : 1;\n    var impl = this;\n    return arrayizeField({\n        /**\n         * Unpacks a bytefield from bytes.\n         *\n         * @param {ArrayBuffer|Uint8Array} buf - The buffer to read from.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {Uint8Array} The unpacked bytefield.\n         */\n        valueFromBytes: function (buf, off) {\n            off || (off = {bytes:0, bits:0});\n            var bytes = buf instanceof ArrayBuffer ? new Uint8Array(buf) : buf;\n            var val = bytes.subarray(off.bytes, off.bytes + this.size);\n            addField(off, this);\n            return impl.b2v.call(this, val);\n            //return impl.b2v.call(this, val.buffer.slice(val.byteOffset, val.byteOffset + val.byteLength)); // Returns ArrayBuffer usually\n        },\n        /**\n         * Packs a bytefield into bytes.\n         *\n         * @param {ArrayBuffer|Uint8Array} val - The value to pack.\n         * @param {ArrayBuffer|Uint8Array} [buf] - The buffer to write to.\n         * @param {Object} [off] - The offset object with bytes and bits.\n         * @returns {ArrayBuffer|Uint8Array} The buffer with packed data.\n         */\n        bytesFromValue: function (val, buf, off) {\n            buf || (buf = newBuffer(this.size));\n            off || (off = { bytes: 0, bits: 0 });\n            var bytes = buf instanceof ArrayBuffer ? new Uint8Array(buf) : buf;\n            var blk = bytes.subarray(off.bytes, off.bytes + this.size);\n            impl.vTb.call(this, val, blk);\n            addField(off, this);\n            return buf;\n        },\n        size: size,\n        name: name\n    }, count);\n}\n\n/**\n * Swaps adjacent byte pairs in a buffer.\n * http://stackoverflow.com/a/7460958/72637\n *\n * @param {Uint8Array} fromBuffer - The source buffer.\n * @param {Uint8Array} [toBuffer] - The destination buffer. If not provided, fromBuffer is modified.\n * @returns {Uint8Array} The buffer with swapped byte pairs.\n */\nfunction swapBytesPairs(fromBuffer, toBuffer) {\n    toBuffer = toBuffer || fromBuffer;\n    var l = fromBuffer.length;\n    for (var i = 1; i < l; i += 2) {\n        var a = fromBuffer[i - 1];\n        toBuffer[i - 1] = fromBuffer[i];\n        toBuffer[i] = a;\n    }\n    return toBuffer;\n}\n\n_.byte = bytefield.bind({\n    /**\n     * Converts bytes to a value.\n     *\n     * @param {ArrayBuffer|Uint8Array} b - The bytes to convert.\n     * @returns {ArrayBuffer|Uint8Array} The byte value.\n     */\n    b2v: function (b) { return b; },\n    /**\n     * Converts a value to bytes.\n     *\n     * @param {ArrayBuffer|Uint8Array} v - The value to convert.\n     * @param {Uint8Array} b - The buffer to write to.\n     * @returns {number} The number of bytes written.\n     */\n    vTb: function (v, b) { if (!v) return 0; b.set(new Uint8Array(v)); return v.byteLength; }\n});\n\n_.char = bytefield.bind({\n    /**\n     * Converts bytes to a UTF-8 string.\n     *\n     * @param {ArrayBuffer|Uint8Array} b - The bytes to convert.\n     * @returns {string} The resulting string.\n     */\n    b2v: function (b) {\n        var decoder;\n        if (typeof TextDecoder !== 'undefined') {\n            decoder = new TextDecoder('utf-8');\n        } else {\n            var TextDecoder = function() { };\n            TextDecoder.prototype.decode = function(buffer) {\n                var bytes = new Uint8Array(buffer);\n                var str = '';\n                for (var i = 0; i < bytes.length; i ++) {\n                    str += String.fromCharCode(bytes[i]);\n                }\n                return str;\n            };\n            decoder = new TextDecoder();\n        }\n        var v = decoder.decode(b);\n        var z = v.indexOf('\\0');\n        return (~z) ? v.slice(0, z) : v;\n    },\n    /**\n     * Converts a string to UTF-8 bytes.\n     *\n     * @param {string} v - The string to convert.\n     * @param {Uint8Array} b - The buffer to write to.\n     * @returns {number} The number of bytes written.\n     */\n    vTb: function (v,b) {\n        v || (v = '');\n        var encoder;\n        if (typeof TextEncoder !== 'undefined') {\n            encoder = new TextEncoder('utf-8');\n        } else {\n            var TextEncoder = function() { };\n            TextEncoder.prototype.encode = function (str) {\n                var bytes = new Uint8Array(str.length);\n                for (var i = 0; i < str.length; i++) {\n                    bytes[i] = str.charCodeAt(i);\n                }\n                return bytes;\n            };\n            encoder = new TextEncoder();\n        }\n        var encoded = encoder.encode(v);\n        for (var i = 0; i < encoded.length && i < b.length; i++) {\n            b[i] = encoded[i];\n        }\n        return encoded.length;\n    }\n});\n\n_.char16le = bytefield.bind({\n    /**\n     * Converts bytes to a UTF-16LE string.\n     *\n     * @param {ArrayBuffer|Uint8Array} b - The bytes to convert.\n     * @returns {string} The resulting string.\n     */\n    b2v: function (b) {\n        var decoder;\n        if (typeof TextDecoder !== 'undefined') {\n            decoder = new TextDecoder('utf-16le');\n        } else {\n            var TextDecoder = function() { };\n            TextDecoder.prototype.decode = function(buffer) {\n                var bytes = new Uint8Array(buffer);\n                var str = '';\n                for (var i = 0; i < bytes.length; i += 2) {\n                    var charCode = bytes[i] | (bytes[i + 1] << 8);\n                    str += String.fromCharCode(charCode);\n                }\n                return str;\n            };\n            decoder = new TextDecoder();\n        }\n        var v = decoder.decode(b);\n        var z = v.indexOf('\\0');\n        return (~z) ? v.slice(0, z) : v;\n    },\n    /**\n     * Converts a string to UTF-16LE bytes.\n     *\n     * @param {string} v - The string to convert.\n     * @param {Uint8Array} b - The buffer to write to.\n     * @returns {number} The number of bytes written.\n     */\n    vTb: function (v,b) {\n        v || (v = '');\n        var bytesWritten = 0;\n        for (var i = 0; i < v.length && bytesWritten + 1 < b.length; i++) {\n            var charCode = v.charCodeAt(i);\n            b[bytesWritten++] = charCode & 0xFF;\n            b[bytesWritten++] = (charCode >> 8) & 0xFF;\n        }\n        return bytesWritten;\n    }\n});\n\n_.char16be = bytefield.bind({\n    /**\n     * Converts bytes to a UTF-16BE string.\n     *\n     * @param {ArrayBuffer|Uint8Array} b - The bytes to convert.\n     * @returns {string} The resulting string.\n     */\n    b2v: function (b) {\n        var temp = new Uint8Array(b);\n        swapBytesPairs(temp);\n        var decoder;\n        if (typeof TextDecoder !== 'undefined') {\n            decoder = new TextDecoder('utf-16le');\n        } else {\n            var TextDecoder = function() { };\n            TextDecoder.prototype.decode = function(buffer) {\n                var bytes = new Uint8Array(buffer);\n                var str = '';\n                for (var i = 0; i < bytes.length; i += 2) {\n                    var charCode = bytes[i] | (bytes[i + 1] << 8);\n                    str += String.fromCharCode(charCode);\n                }\n                return str;\n            };\n            decoder = new TextDecoder();\n        }\n        var v = decoder.decode(temp.buffer);\n        var z = v.indexOf('\\0');\n        return (~z) ? v.slice(0, z) : v;\n    },\n    /**\n     * Converts a string to UTF-16BE bytes.\n     *\n     * @param {string} v - The string to convert.\n     * @param {Uint8Array} b - The buffer to write to.\n     * @returns {number} The number of bytes written.\n     */\n    vTb: function (v,b) {\n        v || (v = '');\n        var temp = new Uint8Array(b.length);\n        var bytesWritten = 0;\n        for (var i = 0; i < v.length && bytesWritten + 1 < temp.length; i++) {\n            var charCode = v.charCodeAt(i);\n            temp[bytesWritten++] = charCode & 0xFF;\n            temp[bytesWritten++] = (charCode >> 8) & 0xFF;\n        }\n        swapBytesPairs(temp, b);\n        return bytesWritten;\n    }\n});\n\n/**\n * Defines a standard field with specific read and write methods.\n *\n * @param {string} sig - The signature indicating the type. This is assumed to be available in the DataView API as DataView.(get/set)(sig), e.g. \"Uint32\" is valid because DataView.getUint32() is a valid method\n * @param {number} size - The size of the field in bytes.\n * @param {boolean} littleEndian - Indicates whether or not the field is little endian.\n * @returns {Function} A function to create the standard field.\n */\nfunction standardField(sig, size, littleEndian) {\n    var read = 'get' + sig,\n        dump = 'set' + sig;\n    size || (size = +sig.match(/\\d+/)[0] / 8);\n    return function (name, count) {\n        if (typeof name !== 'string') {\n            count = name;\n            name = null;\n        }\n        return arrayizeField({\n            /**\n             * Unpacks a standard field from bytes.\n             *\n             * @param {ArrayBuffer|Uint8Array} buf - The buffer to read from.\n             * @param {Object} [off] - The offset object with bytes and bits.\n             * @returns {*} The unpacked value.\n             */\n            valueFromBytes: function (buf, off) {\n                off || (off = {bytes:0});\n                var bytes = buf instanceof ArrayBuffer ? new Uint8Array(buf) : buf;\n                var view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n                var val = view[read](off.bytes, littleEndian);\n                addField(off, this);\n                return val;\n            },\n            /**\n             * Packs a standard field into bytes.\n             *\n             * @param {*} val - The value to pack.\n             * @param {ArrayBuffer|Uint8Array} [buf] - The buffer to write to.\n             * @param {Object} [off] - The offset object with bytes and bits.\n             * @returns {ArrayBuffer|Uint8Array} The buffer with packed data.\n             */\n            bytesFromValue: function (val, buf, off) {\n                val || (val = 0);\n                buf || (buf = newBuffer(this.size));\n                off || (off = {bytes:0});\n                var bytes = buf instanceof ArrayBuffer ? new Uint8Array(buf) : buf;\n                var view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n                view[dump](off.bytes, val, littleEndian);\n                addField(off, this);\n                return buf;\n            },\n            size: size,\n            name: name\n        }, count);\n    };\n}\n\n_.uint8 = standardField('Uint8', 1, false);\n_.uint16 = standardField('Uint16', 2, false);\n_.uint32 = standardField('Uint32', 4, false);\n_.uint16le = standardField('Uint16', 2, true);\n_.uint32le = standardField('Uint32', 4, true);\n\n_.int8 = standardField('Int8', 1, false);\n_.int16 = standardField('Int16', 2, false);\n_.int32 = standardField('Int32', 4, false);\n_.int16le = standardField('Int16', 2, true);\n_.int32le = standardField('Int32', 4, true);\n\n_.float32 = standardField('Float32', 4, false);\n_.float64 = standardField('Float64', 8, false);\n_.float32le = standardField('Float32', 4, true);\n_.float64le = standardField('Float64', 8, true);\n\n/**\n * Derives a new field based on an existing one with custom pack and unpack functions.\n *\n * @param {Object} orig - The original field to derive from.\n * @param {Function} pack - The function to pack the derived value.\n * @param {Function} unpack - The function to unpack the derived value.\n * @returns {Function} A function to create the derived field.\n */\n_.derive = function (orig, pack, unpack) {\n    return function (name, count) {\n        if (typeof name !== 'string') {\n            count = name;\n            name = null;\n        }\n        return arrayizeField(extend({\n            /**\n             * Unpacks a derived field from bytes.\n             *\n             * @param {ArrayBuffer|Uint8Array} buf - The buffer to read from.\n             * @param {Object} [off] - The offset object with bytes and bits.\n             * @returns {*} The unpacked derived value.\n             */\n            valueFromBytes: function (buf, off) {\n                return unpack(orig.valueFromBytes(buf, off));\n            },\n            /**\n             * Packs a derived field into bytes.\n             *\n             * @param {*} val - The value to pack.\n             * @param {ArrayBuffer|Uint8Array} [buf] - The buffer to write to.\n             * @param {Object} [off] - The offset object with bytes and bits.\n             * @returns {ArrayBuffer|Uint8Array} The buffer with packed data.\n             */\n            bytesFromValue: function (val, buf, off) {\n                return orig.bytesFromValue(pack(val), buf, off);\n            },\n            name: name\n        }, ('width' in orig) ? {width:orig.width} : {size:orig.size}), count);\n    };\n};\n\n// Export for Node.js environments\nif (typeof module !== 'undefined' && module.exports) {\n    console.log('module scope');\n    module.exports = _;\n} else {\n    // Export to global scope for browsers\n    console.log('not module scope');\n    window._ = _;\n}\n",
    "/*!\nHtml library by datkat21 on GitHub. Licensed under MIT\nhttps://github.com/datkat21/html\n!*/\nexport default class Html {\n  /** The HTML element referenced in this instance. Change using `.swapRef()`, or remove using `.cleanup()`. */\n  elm;\n  /**\n   * Create a new instance of the Html class.\n   * @param elm The HTML element to be created or classified from.\n   */\n  constructor(elm) {\n    if (elm instanceof HTMLElement) this.elm = elm;\n    else this.elm = document.createElement(elm || \"div\");\n  }\n  /**\n   * Sets the text of the current element.\n   * @param val The text to set to.\n   * @returns Html\n   */\n  text(val) {\n    this.elm.innerText = val;\n    return this;\n  }\n  /**\n   * Sets the text of the current element.\n   * @param val The text to set to.\n   * @returns Html\n   */\n  html(val) {\n    this.elm.innerHTML = val;\n    return this;\n  }\n  /**\n   * Safely remove the element. Can be used in combination with a `.swapRef()` to achieve a \"delete & swap\" result.\n   * @returns Html\n   */\n  cleanup() {\n    this.elm.remove();\n    return this;\n  }\n  /**\n   * querySelector something.\n   * @param selector The query selector.\n   * @returns The HTML element (not as Html)\n   */\n  query(selector) {\n    return this.elm.querySelector(selector);\n  }\n  /**\n   * An easier querySelector method.\n   * @param query The string to query\n   * @returns a new Html\n   */\n  qs(query) {\n    if (this.elm.querySelector(query))\n      return Html.from(this.elm.querySelector(query));\n    else return null;\n  }\n  /**\n   * An easier querySelectorAll method.\n   * @param query The string to query\n   * @returns a new Html\n   */\n  qsa(query) {\n    if (this.elm.querySelector(query))\n      return Array.from(this.elm.querySelectorAll(query)).map((e) =>\n        Html.from(e),\n      );\n    else return null;\n  }\n  /**\n   * Sets the ID of the element.\n   * @param val The ID to set.\n   * @returns Html\n   */\n  id(val) {\n    this.elm.id = val;\n    return this;\n  }\n  /**\n   * Toggle on/off a class.\n   * @param val The class to toggle.\n   * @returns Html\n   */\n  class(...val) {\n    for (let i = 0; i < val.length; i++) this.elm.classList.toggle(val[i]);\n    return this;\n  }\n  /**\n   * Toggles ON a class.\n   * @param val The class to enable.\n   * @returns Html\n   */\n  classOn(...val) {\n    for (let i = 0; i < val.length; i++) this.elm.classList.add(val[i]);\n    return this;\n  }\n  /**\n   * Toggles OFF a class.\n   * @param val The class to disable.\n   * @returns Html\n   */\n  classOff(...val) {\n    for (let i = 0; i < val.length; i++) this.elm.classList.remove(val[i]);\n    return this;\n  }\n  /**\n   * Apply CSS styles (dashed method.) Keys use CSS syntax, e.g. `background-color`.\n   * @param obj The styles to apply (as an object of `key: value;`.)\n   * @returns Html\n   */\n  style(obj) {\n    for (const key of Object.keys(obj))\n      this.elm.style.setProperty(key, obj[key]);\n    return this;\n  }\n  /**\n   * Apply CSS styles (JS method.) Keys use JS syntax, e.g. `backgroundColor`.\n   * @param obj The styles to apply (as an object of `key: value;`)\n   * @returns Html\n   */\n  styleJs(obj) {\n    // @ts-expect-error\n    for (const key of Object.keys(obj)) this.elm.style[key] = obj[key];\n    return this;\n  }\n  /**\n   * Apply an event listener.\n   * @param ev The event listener type to add.\n   * @param cb The event listener callback to add.\n   * @returns Html\n   */\n  on(ev, cb) {\n    this.elm.addEventListener(ev, cb);\n    return this;\n  }\n  /**\n   * Remove an event listener.\n   * @param ev The event listener type to remove.\n   * @param cb The event listener callback to remove.\n   * @returns Html\n   */\n  un(ev, cb) {\n    this.elm.removeEventListener(ev, cb);\n    return this;\n  }\n  /**\n   * Retrieve the corresponding HTMLElement.\n   * @param element The element to retrieve. Can be an HTMLElement, Html instance, or a string (as query selector).\n   * @returns The corresponding HTMLElement or null if QS and element are not found.\n   */\n  getElement(element) {\n    let p = element instanceof Html ? element.elm : element;\n    if (typeof element === \"string\") p = document.querySelector(element);\n    if (p instanceof HTMLElement) return p;\n    else throw new Error(\"Invalid element type.\");\n  }\n  /**\n   * Append this element to another element. Uses `appendChild()` on the parent.\n   * @param parent Element to append to. HTMLElement, Html, and string (as querySelector) are supported.\n   * @returns Html\n   */\n  appendTo(parent) {\n    let p = this.getElement(parent);\n    if (p instanceof HTMLElement) p.appendChild(this.elm);\n    else throw new Error(\"Invalid parent element, exausted 3 checks.\");\n    return this;\n  }\n  /**\n   * Prepend this element to another element. Uses `prepend()` on the parent.\n   * @param parent Element to append to. HTMLElement, Html, and string (as querySelector) are supported.\n   * @returns Html\n   */\n  prependTo(parent) {\n    let p = this.getElement(parent);\n    if (p instanceof HTMLElement) p.prepend(this.elm);\n    return this;\n  }\n  /**\n   * Append an element. Typically used as a `.append(new Html(...))` call.\n   * @param elem The element to append.\n   * @returns Html\n   */\n  append(elem) {\n    let e = this.getElement(elem);\n    if (e instanceof HTMLElement) this.elm.appendChild(e);\n    else if (typeof elem === \"string\") {\n      const newElem = document.createElement(elem);\n      this.elm.appendChild(newElem);\n      return new Html(newElem.tagName);\n    }\n    return this;\n  }\n  /**\n   * Prepend an element. Typically used as a `.prepend(new Html(...))` call.\n   * @param elem The element to prepend.\n   * @returns Html\n   */\n  prepend(elem) {\n    let e = this.getElement(elem);\n    if (e instanceof HTMLElement) this.elm.prepend(e);\n    else if (typeof elem === \"string\") {\n      const newElem = document.createElement(elem);\n      this.elm.prepend(newElem);\n      return new Html(newElem.tagName);\n    }\n    return this;\n  }\n  /**\n   * Append multiple elements. Typically used as a `.appendMany(new Html(...), new Html(...)` call.\n   * @param elements The elements to append.\n   * @returns Html\n   */\n  appendMany(...elements) {\n    for (const elem of elements) this.append(elem);\n    return this;\n  }\n  /**\n   * Prepend multiple elements. Typically used as a `.prependMany(new Html(...), new Html(...)` call.\n   * @param elements The elements to prepend.\n   * @returns Html\n   */\n  prependMany(...elements) {\n    for (const elem of elements) this.prepend(elem);\n    return this;\n  }\n  /**\n   * Clear the innerHTML of the element.\n   * @returns Html\n   */\n  clear() {\n    this.elm.innerHTML = \"\";\n    return this;\n  }\n  /**\n   * Set attributes (object method.)\n   * @param obj The attributes to set (as an object of `key: value;`)\n   * @returns Html\n   */\n  attr(obj) {\n    for (let key in obj)\n      if (obj[key] !== null && obj[key] !== undefined)\n        this.elm.setAttribute(key, obj[key]);\n      else this.elm.removeAttribute(key);\n    return this;\n  }\n  /**\n   * Set the text value of the element. Only works if element is `input` or `textarea`.\n   * @param str The value to set.\n   * @returns Html\n   */\n  val(str) {\n    this.elm.value = str;\n    return this;\n  }\n  /**\n   * Retrieve text content from the element. (as innerText, not trimmed)\n   * @returns string\n   */\n  getText() {\n    return this.elm.innerText;\n  }\n  /**\n   * Retrieve HTML content from the element.\n   * @returns string\n   */\n  getHtml() {\n    return this.elm.innerHTML;\n  }\n  /**\n   * Retrieve the value of the element. Only applicable if it is an `input` or `textarea`.\n   * @returns string\n   */\n  getValue() {\n    return this.elm.value;\n  }\n  /**\n   * Swap the local `elm` with a new HTMLElement.\n   * @param elm The element to swap with.\n   * @returns Html\n   */\n  swapRef(elm) {\n    this.elm = elm;\n    return this;\n  }\n  /**\n   * An alternative method to create an Html instance.\n   * @param elm Element to create from.\n   * @returns Html\n   */\n  static from(elm) {\n    const qs = () => Html.qs(elm);\n    if (typeof elm === \"string\") return qs();\n    return new Html(elm);\n  }\n  /**\n   * An easier querySelector method.\n   * @param query The string to query\n   * @returns a new Html\n   */\n  static qs(query) {\n    if (document.querySelector(query))\n      return Html.from(document.querySelector(query));\n    return null;\n  }\n  /**\n   * An easier querySelectorAll method.\n   * @param query The string to query\n   * @returns a new Html\n   */\n  static qsa(query) {\n    if (document.querySelector(query))\n      return Array.from(document.querySelectorAll(query)).map((e) =>\n        Html.from(e),\n      );\n    return null;\n  }\n}\n",
    "import Html from \"@datkat21/html\";\nimport { GenericType } from \"../types/GenericType\";\nimport type { UpdateFunction } from \"../types/UpdateFunction\";\n\nexport function Slider(\n  property: string | undefined,\n  min: number,\n  max: number,\n  update: UpdateFunction,\n  // type: GenericType,\n  isUrl: boolean = false,\n  valueModifier?: (val: any) => any,\n  noLabel?: boolean\n) {\n  var prop: string;\n  prop = property || \"\";\n  const container = new Html(\"div\");\n  const label = new Html(\"label\").attr({ for: prop }).text(prop);\n\n  const slider = new Html(\"input\")\n    .attr({\n      id: prop,\n      type: \"range\",\n      min: 0,\n      max: max - min,\n      value: update(prop, 0, isUrl, true),\n    })\n    .on(\"input\", (e) => {\n      let value = parseInt((e.target as any).value) + min;\n\n      if (valueModifier) {\n        value = valueModifier(value);\n      }\n\n      if (isUrl) update(prop, value, true);\n      else update(prop, value, false);\n    });\n\n  if (noLabel === false || noLabel === undefined) {\n    container.append(label);\n  }\n  container.append(slider);\n\n  return container;\n}\n",
    "import Html from \"@datkat21/html\";\nimport { GenericType } from \"../types/GenericType\";\nimport type { UpdateFunction } from \"../types/UpdateFunction\";\n\nexport function Select(\n  property: string,\n  values: Record<string, any>,\n  update: UpdateFunction,\n  isUrl: boolean,\n  isConfig: boolean = false\n) {\n  return new Html(\"div\").appendMany(\n    new Html(\"label\").attr({ for: property }).text(property),\n    new Html(\"select\")\n      .attr({\n        id: property,\n        type: \"range\",\n      })\n      .appendMany(\n        ...Object.keys(values).map((key) => new Option(key, values[key]))\n      )\n      .on(\"change\", (e) => {\n        let value = (e.target as any).value;\n\n        if (isUrl)\n          update(\n            property,\n            value,\n            true,\n            false,\n            false,\n            undefined,\n            false,\n            isConfig\n          );\n        else\n          update(\n            property,\n            value,\n            false,\n            false,\n            false,\n            undefined,\n            false,\n            isConfig\n          );\n      })\n  );\n}\n",
    "import _ from \"../../lib/struct-fu/lib\";\nimport type { Field, Struct } from \"../../lib/struct-fu/types/Generic\";\n\nexport const NnMiiCharInfo = _.struct(\"nn::mii::CharInfo\", [\n  _.byte(\"createId\", 16),\n  /* null terminated */\n  _.char16le(\"nickname\", 22),\n  _.uint8(\"fontRegion\"),\n  _.uint8(\"favoriteColor\"),\n  _.uint8(\"gender\"),\n  _.uint8(\"height\"),\n  _.uint8(\"build\"),\n  /* special or not */\n  _.uint8(\"type\"),\n  _.uint8(\"regionMove\"),\n  _.uint8(\"facelineType\"),\n  _.uint8(\"facelineColor\"),\n  _.uint8(\"facelineWrinkle\"),\n  _.uint8(\"facelineMake\"),\n  _.uint8(\"hairType\"),\n  _.uint8(\"hairColor\"),\n  _.uint8(\"hairFlip\"),\n  _.uint8(\"eyeType\"),\n  _.uint8(\"eyeColor\"),\n  _.uint8(\"eyeScale\"),\n  _.uint8(\"eyeAspect\"),\n  _.uint8(\"eyeRotate\"),\n  _.uint8(\"eyeX\"),\n  _.uint8(\"eyeY\"),\n  _.uint8(\"eyebrowType\"),\n  _.uint8(\"eyebrowColor\"),\n  _.uint8(\"eyebrowScale\"),\n  _.uint8(\"eyebrowAspect\"),\n  _.uint8(\"eyebrowRotate\"),\n  _.uint8(\"eyebrowX\"),\n  _.uint8(\"eyebrowY\"),\n  _.uint8(\"noseType\"),\n  _.uint8(\"noseScale\"),\n  _.uint8(\"noseY\"),\n  _.uint8(\"mouthType\"),\n  _.uint8(\"mouthColor\"),\n  _.uint8(\"mouthScale\"),\n  _.uint8(\"mouthAspect\"),\n  _.uint8(\"mouthY\"),\n  _.uint8(\"beardColor\"),\n  _.uint8(\"beardType\"),\n  _.uint8(\"mustacheType\"),\n  _.uint8(\"mustacheScale\"),\n  _.uint8(\"mustacheY\"),\n  _.uint8(\"glassType\"),\n  _.uint8(\"glassColor\"),\n  _.uint8(\"glassScale\"),\n  _.uint8(\"glassY\"),\n  _.uint8(\"moleType\"),\n  _.uint8(\"moleScale\"),\n  _.uint8(\"moleX\"),\n  _.uint8(\"moleY\"),\n  /* always zero */\n  _.uint8(\"reserved\"),\n]) as Struct;\n",
    "export var stripSpaces = function (str: string) {\n  return str.replace(/\\s+/g, \"\");\n};\n\nexport var hexToUint8Array = function (hex: string) {\n  return new Uint8Array(\n    hex.match(/.{1,2}/g)!.map(function (byte: string) {\n      return parseInt(byte, 16);\n    })\n  );\n};\n\nexport var base64ToUint8Array = function (base64: string) {\n  // Replace URL-safe Base64 characters\n  var normalizedBase64 = base64.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n  // Custom function to pad the string with '=' manually\n  var padBase64 = function (str: string) {\n    while (str.length % 4 !== 0) {\n      str += \"=\";\n    }\n    return str;\n  };\n  // Add padding if necessary\n  var paddedBase64 = padBase64(normalizedBase64);\n  var binaryString = atob(paddedBase64);\n  var len = binaryString.length;\n  var bytes = new Uint8Array(len);\n  for (var i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n};\n\nexport var parseHexOrB64TextStringToUint8Array = function (text: string) {\n  var inputData;\n  // decode it to a uint8array whether it's hex or base64\n  var textData = stripSpaces(text);\n  // check if it's base 16 exclusively, otherwise assume base64\n  if (/^[0-9a-fA-F]+$/.test(textData)) inputData = hexToUint8Array(textData);\n  else inputData = base64ToUint8Array(textData);\n\n  return inputData;\n};\n\nexport function dataToBase64(data: number[]) {\n  return btoa(String.fromCharCode.apply(null, data));\n  // return da1ta.toBase64();\n  // return data.toBase64();\n  // return btoa(String.fromCharCode.apply(null, data));\n}\nexport function dataToHex(data: number[]) {\n  return Array.from(data, (i: any) => i.toString(16).padStart(2, \"0\")).join(\"\");\n  //  data.toHex();\n}\n",
    "import Html from \"@datkat21/html\";\n\nexport const Header = (title: string) => {\n  return new Html(\"span\").class(\"header\").text(title);\n};\n\nexport const Subheader = (title: string) => {\n  return new Html(\"span\").class(\"sub-header\").text(title);\n};\n",
    "import Html from \"@datkat21/html\";\nimport type { UpdateFunction } from \"../types/UpdateFunction\";\n\nexport function Array(\n  property: string | undefined,\n  min: number,\n  max: number,\n  length: number,\n  update: UpdateFunction,\n  valueModifier?: (val: any) => any,\n  noLabel?: boolean\n) {\n  var prop: string;\n  prop = property || \"\";\n  const container = new Html(\"div\");\n  const label = new Html(\"label\").attr({ for: prop }).text(prop);\n\n  if (noLabel === false || noLabel === undefined) {\n    container.append(label);\n  }\n\n  for (var i = 0; i < length; i++) {\n    var index = i;\n    const slider = new Html(\"input\")\n      .attr({\n        id: prop,\n        type: \"text\",\n        minLength: 0,\n        maxLength: max - min,\n        value: update(prop, 0, false, true, false, index.toString())\n          .toString(16)\n          .padStart(2, \"0\"),\n      })\n      .class(\"array\")\n      .on(\"input\", (e) => {\n        let value = parseInt((e.target as any).value, 16) + min;\n\n        if (valueModifier) {\n          value = valueModifier(value);\n        }\n\n        console.log(\"h\");\n\n        update(prop, value, false, false, false, index.toString(), true);\n      });\n    container.append(slider);\n  }\n\n  return container;\n}\n",
    "import Html from \"@datkat21/html\";\nimport type { UpdateFunction } from \"../types/UpdateFunction\";\n\nexport function String(\n  property: string,\n  min: number,\n  max: number,\n  update: UpdateFunction,\n  isUrl: boolean,\n  noLabel: boolean = false,\n  isConfig: boolean = false\n) {\n  const container = new Html(\"div\");\n  const label = new Html(\"label\").attr({ for: property }).text(property);\n  const input = new Html(\"input\")\n    .attr({\n      id: property,\n      type: \"text\",\n      minLength: min,\n      maxLength: max,\n      value: update(property, 0, isUrl, true, false, undefined, false, true),\n    })\n    .on(\"input\", (e) => {\n      let value = (e.target as any).value;\n\n      if (isUrl)\n        update(property, value, true, false, false, undefined, false, isConfig);\n      else\n        update(\n          property,\n          value,\n          false,\n          false,\n          false,\n          undefined,\n          false,\n          isConfig\n        );\n    });\n\n  if (noLabel === false) {\n    label.appendTo(container);\n  }\n\n  input.appendTo(container);\n  return container;\n}\n",
    "import Html from \"@datkat21/html\";\nimport { PropType, type Prop, type PropTable } from \"../types/Props\";\nimport { Slider } from \"../components/Slider\";\nimport { Array } from \"../components/Array\";\nimport type { UpdateFunction } from \"../types/UpdateFunction\";\nimport { String } from \"../components/String\";\n\nexport function propsToComponentCollection(\n  props: PropTable,\n  update: UpdateFunction\n) {\n  var list: Html[] = [];\n\n  for (var i = 0; i < Object.keys(props).length; i++) {\n    // HACK\n    (function () {\n      var index = i;\n      var key = Object.keys(props)[index];\n      var prop = props[key] as Prop;\n\n      var container = new Html(\"div\");\n      // label\n      new Html(\"label\").text(prop.name || key).appendTo(container);\n\n      let input: Html;\n\n      switch (prop.type) {\n        case PropType.Number:\n          input = Slider(\n            key,\n            prop.min,\n            prop.max,\n            update,\n            false,\n            undefined,\n            true\n          );\n\n          break;\n        case PropType.String:\n          input = String(key, prop.min, prop.max, update, false, true);\n          break;\n        case PropType.Array:\n          input = Array(\n            key,\n            prop.min,\n            prop.max,\n            prop.size,\n            update,\n            undefined,\n            true\n          );\n          break;\n      }\n      container.append(input);\n\n      container.append(\n        new Html(\"button\").text(\"Reset\").on(\"click\", (e) => {\n          console.log(key);\n          switch (prop.type) {\n            case PropType.Number:\n              // var i = input.qs(\"input\")!.elm as HTMLInputElement;\n              // i.value = prop.default as any as string;\n              input.qs(\"input\")!.val(prop.default);\n              console.log(i, index);\n              break;\n            case PropType.String:\n              input.qs(\"input\")!.val(prop.default);\n              break;\n            case PropType.Array:\n              input.qsa(\"input\")!.forEach((item, index) => {\n                item!.val(\n                  (prop.default! as any)[index].toString().padStart(2, \"0\")\n                );\n              });\n              break;\n          }\n          update(key, prop.default, false, false, false);\n        })\n      );\n\n      list.push(container);\n    })();\n  }\n  return list;\n}\n",
    "import { PropType, type PropTable } from \"../types/Props\";\n\nexport const CharInfoProps = {\n  beardColor: { type: PropType.Number, default: 0, min: 0, max: 99 },\n  beardType: { type: PropType.Number, default: 0, min: 0, max: 5 },\n  build: { type: PropType.Number, default: 64, min: 0, max: 127 },\n  createId: {\n    type: PropType.Array,\n    default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    min: 0,\n    max: 255,\n    size: 16,\n  },\n  eyeAspect: { type: PropType.Number, default: 3, min: 0, max: 6 },\n  eyeColor: { type: PropType.Number, default: 8, min: 0, max: 99 },\n  eyeRotate: { type: PropType.Number, default: 4, min: 0, max: 7 },\n  eyeScale: { type: PropType.Number, default: 4, min: 0, max: 7 },\n  eyeType: { type: PropType.Number, default: 2, min: 0, max: 59 },\n  eyeX: { type: PropType.Number, default: 2, min: 0, max: 12 },\n  eyeY: { type: PropType.Number, default: 12, min: 0, max: 18 },\n  eyebrowAspect: { type: PropType.Number, default: 3, min: 0, max: 6 },\n  eyebrowColor: { type: PropType.Number, default: 1, min: 0, max: 99 },\n  eyebrowRotate: { type: PropType.Number, default: 6, min: 0, max: 11 },\n  eyebrowScale: { type: PropType.Number, default: 4, min: 0, max: 8 },\n  eyebrowType: { type: PropType.Number, default: 6, min: 0, max: 24 },\n  eyebrowX: { type: PropType.Number, default: 2, min: 0, max: 12 },\n  eyebrowY: { type: PropType.Number, default: 10, min: 3, max: 18 },\n  facelineColor: { type: PropType.Number, default: 0, min: 0, max: 9 },\n  facelineMake: { type: PropType.Number, default: 0, min: 0, max: 11 },\n  facelineType: { type: PropType.Number, default: 0, min: 0, max: 11 },\n  facelineWrinkle: { type: PropType.Number, default: 0, min: 0, max: 11 },\n  favoriteColor: { type: PropType.Number, default: 0, min: 0, max: 11 },\n  fontRegion: { type: PropType.Number, default: 0, min: 0, max: 3 },\n  gender: { type: PropType.Number, default: 0, min: 0, max: 1 },\n  glassColor: { type: PropType.Number, default: 8, min: 0, max: 99 },\n  glassScale: { type: PropType.Number, default: 4, min: 0, max: 7 },\n  glassType: { type: PropType.Number, default: 0, min: 0, max: 19 },\n  glassY: { type: PropType.Number, default: 10, min: 0, max: 20 },\n  hairColor: { type: PropType.Number, default: 1, min: 0, max: 99 },\n  hairFlip: { type: PropType.Number, default: 0, min: 0, max: 1 },\n  hairType: { type: PropType.Number, default: 33, min: 0, max: 131 },\n  height: { type: PropType.Number, default: 64, min: 0, max: 127 },\n  moleScale: { type: PropType.Number, default: 4, min: 0, max: 8 },\n  moleType: { type: PropType.Number, default: 0, min: 0, max: 1 },\n  moleX: { type: PropType.Number, default: 2, min: 0, max: 16 },\n  moleY: { type: PropType.Number, default: 20, min: 0, max: 30 },\n  mouthAspect: { type: PropType.Number, default: 3, min: 0, max: 6 },\n  mouthColor: { type: PropType.Number, default: 19, min: 0, max: 99 },\n  mouthScale: { type: PropType.Number, default: 4, min: 0, max: 8 },\n  mouthType: { type: PropType.Number, default: 23, min: 0, max: 35 },\n  mouthY: { type: PropType.Number, default: 13, min: 0, max: 18 },\n  mustacheScale: { type: PropType.Number, default: 4, min: 0, max: 8 },\n  mustacheType: { type: PropType.Number, default: 0, min: 0, max: 5 },\n  mustacheY: { type: PropType.Number, default: 10, min: 0, max: 16 },\n  nickname: { type: PropType.String, default: \"Mii\", min: 1, max: 10 },\n  noseScale: { type: PropType.Number, default: 4, min: 0, max: 8 },\n  noseType: { type: PropType.Number, default: 1, min: 0, max: 17 },\n  noseY: { type: PropType.Number, default: 9, min: 0, max: 18 },\n  regionMove: { type: PropType.Number, default: 0, min: 0, max: 3 },\n  reserved: { type: PropType.Number, default: 0, min: 0, max: 1 },\n  type: { type: PropType.Number, default: 0, min: 0, max: 1 },\n} as PropTable;\n",
    "export var viewList = {\n  Portrait: \"face\",\n  \"Head Only\": \"face_only\",\n  \"Head Only Alt\": \"fflmakeicon\",\n  \"Whole Body\": \"all_body_sugar\",\n  \"Whole Body Alt\": \"all_body\",\n  \"Portrait Alt\": \"variableiconbody\",\n  FFLIconWithBody: \"ffliconwithbody\",\n};\n\nexport var originList = {\n  \"(default)\": \"http://mii-renderer.nxw.pw\",\n  \"localhost:5000\": \"http://localhost:5000\",\n  \"mii-renderer.nxw.pw\": \"https://mii-renderer.nxw.pw\",\n  \"mii-unsecure.ariankordi.net\": \"https://mii-unsecure.ariankordi.net\",\n};\n\nexport var shaderList = {\n  \"(default)\": \"-1\",\n  \"Wii U\": \"wiiu\",\n  \"Wii U (Blinn)\": \"wiiu_blinn\",\n  \"Wii U (Bright)\": \"ffliconwithbody\",\n  Switch: \"switch\",\n  Miitomo: \"miitomo\",\n};\n\nexport var bodyList = {\n  \"(default)\": \"-1\",\n  \"Wii U\": \"wiiu\",\n  Switch: \"switch\",\n  Miitomo: \"miitomo\",\n  FFLBodyRes: \"fflbodyres\",\n  \"3DS\": \"3ds\",\n};\n",
    "import _ from \"../../lib/struct-fu/lib.js\";\n\nexport const FFLiCreateID = _.struct([\n  _.ubit(\"flag_normal\", 1),\n  _.ubit(\"flag_1\", 1),\n  _.ubit(\"flag_temporary\", 1),\n  _.ubit(\"flag_3\", 1),\n  _.ubit(\"create_date1\", 14), // 28-bit field\n  _.ubit(\"create_date2\", 14), // 28-bit field\n  _.byte(\"base\", 6),\n]);\nexport const date_timestamp = function (createID: any) {\n  var val28 = (createID.create_date1 << 14) | createID.create_date2;\n  var timestamp = val28 * 2 + 1262304000;\n  return new Date(timestamp * 1000);\n};\nexport const FFLiAuthorID = _.struct([_.byte(\"data\", 8)]);\n\n// based on arian's FFLiMiiDataCore implementation\nexport const Ver3StoreData = _.struct(\"Ver3StoreData\", [\n  // 0x00: 32 bits\n  _.ubitLE(\"mii_version\", 8), // LSB\n  _.ubitLE(\"copyable\", 1),\n  _.ubitLE(\"ng_word\", 1),\n  _.ubitLE(\"region_move\", 2),\n  _.ubitLE(\"font_region\", 2),\n  _.ubitLE(\"reserved_0\", 2), // Unused padding\n  _.ubitLE(\"room_index\", 4),\n  _.ubitLE(\"position_in_room\", 4),\n  _.ubitLE(\"author_type\", 4), // _0_24_27\n  _.ubitLE(\"birth_platform\", 3),\n  _.ubitLE(\"reserved_1\"), // Unused (MSB)\n\n  // 0x04: author_id (8 bytes)\n  _.struct(\"author_id\", [FFLiAuthorID]),\n\n  // 0x0C: creator_id (10 bytes)\n  //_.byte('create_id', 10),\n  _.struct(\"create_id\", [FFLiCreateID]),\n\n  // 0x16: padding (2 bytes)\n  _.byte(\"reserved_2\", 2),\n\n  // 0x18: 16 bits for birthday and favorite\n  _.ubitLE(\"gender\", 1), // LSB\n  _.ubitLE(\"birth_month\", 4),\n  _.ubitLE(\"birth_day\", 5),\n  _.ubitLE(\"favorite_color\", 4),\n  _.ubitLE(\"favorite\", 1),\n  _.ubitLE(\"padding_0\", 1), // Placeholder (MSB)\n\n  // 0x1A: name (UTF-16LE, 20 bytes)\n  _.char16le(\"name\", 20),\n\n  // 0x2E: height and build\n  _.uint8(\"height\"),\n  _.uint8(\"build\"),\n\n  // 0x30: 16 bits for face data\n  _.ubitLE(\"localonly\", 1), // LSB\n  _.ubitLE(\"face_type\", 4),\n  _.ubitLE(\"face_color\", 3),\n  _.ubitLE(\"face_tex\", 4),\n  _.ubitLE(\"face_make\", 4), // MSB\n\n  // 0x32: 16 bits for hair data\n  _.ubitLE(\"hair_type\", 8), // LSB\n  _.ubitLE(\"hair_color\", 3),\n  _.ubitLE(\"hair_flip\", 1),\n  _.ubitLE(\"padding_1\", 4), // Unused padding (MSB)\n\n  // 0x34: 16 bits for eye data\n  _.ubitLE(\"eye_type\", 6), // LSB\n  _.ubitLE(\"eye_color\", 3),\n  _.ubitLE(\"eye_scale\", 4),\n  _.ubitLE(\"eye_aspect\", 3), // MSB\n\n  // 0x36: 16 bits for eye positioning\n  _.ubitLE(\"eye_rotate\", 5), // LSB\n  _.ubitLE(\"eye_x\", 4),\n  _.ubitLE(\"eye_y\", 5),\n  _.ubitLE(\"padding_2\", 2), // Unused padding (MSB)\n\n  // 0x38: 16 bits for eyebrow data\n  _.ubitLE(\"eyebrow_type\", 5), // LSB\n  _.ubitLE(\"eyebrow_color\", 3),\n  _.ubitLE(\"eyebrow_scale\", 4),\n  _.ubitLE(\"eyebrow_aspect\", 3),\n  _.ubitLE(\"padding_3\", 1), // Unused padding (MSB)\n\n  // 0x3A: 16 bits for eyebrow positioning\n  _.ubitLE(\"eyebrow_rotate\", 5), // LSB\n  _.ubitLE(\"eyebrow_x\", 4),\n  _.ubitLE(\"eyebrow_y\", 5),\n  _.ubitLE(\"padding_4\", 2), // Unused padding (MSB)\n\n  // 0x3C: 16 bits for nose data\n  _.ubitLE(\"nose_type\", 5), // LSB\n  _.ubitLE(\"nose_scale\", 4),\n  _.ubitLE(\"nose_y\", 5),\n  _.ubitLE(\"padding_5\", 2), // Unused padding (MSB)\n\n  // 0x3E: 16 bits for mouth data\n  _.ubitLE(\"mouth_type\", 6), // LSB\n  _.ubitLE(\"mouth_color\", 3),\n  _.ubitLE(\"mouth_scale\", 4),\n  _.ubitLE(\"mouth_aspect\", 3), // MSB\n\n  // 0x40: 16 bits for mustache/mouth position\n  _.ubitLE(\"mouth_y\", 5), // LSB\n  _.ubitLE(\"mustache_type\", 3),\n  _.ubitLE(\"padding_6\", 8), // Unused padding (MSB)\n\n  // 0x42: 16 bits for mustache/beard data\n  _.ubitLE(\"beard_type\", 3), // LSB\n  _.ubitLE(\"beard_color\", 3),\n  _.ubitLE(\"beard_scale\", 4),\n  _.ubitLE(\"beard_y\", 5),\n  _.ubitLE(\"padding_7\", 1), // Unused padding (MSB)\n\n  // 0x44: 16 bits for glasses data\n  _.ubitLE(\"glasses_type\", 4), // LSB\n  _.ubitLE(\"glasses_color\", 3),\n  _.ubitLE(\"glasses_scale\", 4),\n  _.ubitLE(\"glass_y\", 5), // MSB\n\n  // 0x46: 16 bits for mole data\n  _.ubitLE(\"mole_type\", 1), // LSB\n  _.ubitLE(\"mole_scale\", 4),\n  _.ubitLE(\"mole_x\", 5),\n  _.ubitLE(\"mole_y\", 5),\n  _.ubitLE(\"padding_8\", 1), // Unused padding (MSB)\n\n  // FFLStoreData\n  _.char16le(\"creator\", 20),\n  _.uint16le(\"padding_9\"),\n  _.uint16(\"checksum\"),\n]);\n\n// Generate type data with this snippet\n/*\nvar obj = Ver3StoreData.unpack(parseHexOrB64TextStringToUint8Array(\"...\"))\nvar text=\"\";\n\nfor (var key in obj) {\n  text += `${key}: ${typeof obj[key]};\\n`\n}\n\nconsole.log(text)\n*/\nexport type Ver3StoreData = {\n  mii_version: number;\n  copyable: number;\n  ng_word: number;\n  region_move: number;\n  font_region: number;\n  reserved_0: number;\n  room_index: number;\n  position_in_room: number;\n  author_type: number;\n  birth_platform: number;\n  reserved_1: number;\n  author_id: FFLiAuthorID;\n  create_id: FFLiCreateID;\n  reserved_2: object;\n  gender: number;\n  birth_month: number;\n  birth_day: number;\n  favorite_color: number;\n  favorite: number;\n  padding_0: number;\n  name: string;\n  height: number;\n  build: number;\n  localonly: number;\n  face_type: number;\n  face_color: number;\n  face_tex: number;\n  face_make: number;\n  hair_type: number;\n  hair_color: number;\n  hair_flip: number;\n  padding_1: number;\n  eye_type: number;\n  eye_color: number;\n  eye_scale: number;\n  eye_aspect: number;\n  eye_rotate: number;\n  eye_x: number;\n  eye_y: number;\n  padding_2: number;\n  eyebrow_type: number;\n  eyebrow_color: number;\n  eyebrow_scale: number;\n  eyebrow_aspect: number;\n  padding_3: number;\n  eyebrow_rotate: number;\n  eyebrow_x: number;\n  eyebrow_y: number;\n  padding_4: number;\n  nose_type: number;\n  nose_scale: number;\n  nose_y: number;\n  padding_5: number;\n  mouth_type: number;\n  mouth_color: number;\n  mouth_scale: number;\n  mouth_aspect: number;\n  mouth_y: number;\n  mustache_type: number;\n  padding_6: number;\n  beard_type: number;\n  beard_color: number;\n  beard_scale: number;\n  beard_y: number;\n  padding_7: number;\n  glasses_type: number;\n  glasses_color: number;\n  glasses_scale: number;\n  glass_y: number;\n  mole_type: number;\n  mole_scale: number;\n  mole_x: number;\n  mole_y: number;\n  padding_8: number;\n  creator: string;\n  padding_9: number;\n  checksum: number;\n};\n\nexport type FFLiAuthorID = {\n  data: Uint8Array;\n};\n\nexport type FFLiCreateID = {\n  flag_normal: number;\n  flag_1: number;\n  flag_temporary: number;\n  flag_3: number;\n  create_date1: number;\n  create_date2: number;\n  base: Uint8Array;\n};\n",
    "import _ from \"../../lib/struct-fu/lib\";\nimport type { Struct } from \"../../lib/struct-fu/types/Generic\";\n\nexport const RFLCreateID = _.struct([\n  _.uint8(\"data\", 8), // RFL_CREATEID_LEN\n]);\n\n// example RCD\n// 2A8A0062000000000000000000000000000000000000005AC00053D9A611223320047900694008C3486D8C58007298AB008A008A25040061000000000000000000000000000000000000\n\nexport const RFLCharData = _.struct([\n  // typedef struct RFLiCharData {\n  //     // at 0x0\n  //     u16 padding0 : 1;\n  _.ubit(\"padding0\", 1),\n  //     u16 sex : 1;\n  _.ubit(\"gender\", 1),\n  //     u16 birthMonth : 4;\n  _.ubit(\"birthMonth\", 4),\n  //     u16 birthDay : 5;\n  _.ubit(\"birthDay\", 5),\n  //     u16 favoriteColor : 4;\n  _.ubit(\"favoriteColor\", 4),\n  //     u16 favorite : 1;\n  _.ubit(\"favorite\", 1),\n\n  //     wchar_t name[RFL_NAME_LEN]; // at 0x2\n  _.char16be(\"name\", 0x14),\n  //     u8 height;                  // at 0x16\n  _.uint8(\"height\"),\n  //     u8 build;                   // at 0x17\n  _.uint8(\"build\"),\n  //     RFLCreateID createID;       // at 0x18\n  _.struct(\"create_id\", [RFLCreateID]),\n\n  //     // at 0x20\n  //     u16 faceType : 3;\n  _.ubit(\"faceType\", 3),\n  //     u16 faceColor : 3;\n  _.ubit(\"faceColor\", 3),\n  //     u16 faceTex : 4;\n  _.ubit(\"faceTex\", 4),\n  //     u16 padding2 : 3;\n  _.ubit(\"padding_2\", 3),\n  //     u16 localonly : 1;\n  _.ubit(\"localonly\", 1),\n  //     u16 type : 2;\n  _.ubit(\"type\", 2),\n\n  //     // at 0x22\n  //     u16 hairType : 7;\n  _.ubit(\"hairType\", 7),\n  //     u16 hairColor : 3;\n  _.ubit(\"hairColor\", 3),\n  //     u16 hairFlip : 1;\n  _.ubit(\"hairFlip\", 1),\n  //     u16 padding3 : 5;\n  _.ubit(\"padding_3\", 5),\n\n  //     // at 0x24\n  //     u16 eyebrowType : 5;\n  _.ubit(\"eyebrowType\", 5),\n  //     u16 eyebrowRotate : 5;\n  _.ubit(\"eyebrowRotate\", 5),\n  //     u16 padding4 : 6;\n  _.ubit(\"padding_4\", 6),\n\n  //     // at 0x26\n  //     u16 eyebrowColor : 3;\n  _.ubit(\"eyebrowColor\", 3),\n  //     u16 eyebrowScale : 4;\n  _.ubit(\"eyebrowScale\", 4),\n  //     u16 eyebrowY : 5;\n  _.ubit(\"eyebrowY\", 5),\n  //     u16 eyebrowX : 4;\n  _.ubit(\"eyebrowX\", 4),\n\n  //     // at 0x28\n  //     u16 eyeType : 6;\n  _.ubit(\"eyeType\", 6),\n  //     u16 eyeRotate : 5;\n  _.ubit(\"eyeRotate\", 5),\n  //     u16 eyeY : 5;\n  _.ubit(\"eyeY\", 5),\n\n  //     // at 0x2A\n  //     u16 eyeColor : 3;\n  _.ubit(\"eyeColor\", 3),\n  //     u16 eyeScale : 4;\n  _.ubit(\"eyeScale\", 4),\n  //     u16 eyeX : 4;\n  _.ubit(\"eyeX\", 4),\n  //     u16 padding5 : 5;\n  _.ubit(\"padding_5\", 5),\n\n  //     // at 0x2C\n  //     u16 noseType : 4;\n  _.ubit(\"noseType\", 4),\n  //     u16 noseScale : 4;\n  _.ubit(\"noseScale\", 4),\n  //     u16 noseY : 5;\n  _.ubit(\"noseY\", 5),\n  //     u16 padding6 : 3;\n  _.ubit(\"padding_6\", 3),\n\n  //     // at 0x2E\n  //     u16 mouthType : 5;\n  _.ubit(\"mouthType\", 5),\n  //     u16 mouthColor : 2;\n  _.ubit(\"mouthColor\", 2),\n  //     u16 mouthScale : 4;\n  _.ubit(\"mouthScale\", 4),\n  //     u16 mouthY : 5;\n  _.ubit(\"mouthY\", 5),\n\n  //     // at 0x30\n  //     u16 glassType : 4;\n  _.ubit(\"glassType\", 4),\n  //     u16 glassColor : 3;\n  _.ubit(\"glassColor\", 3),\n  //     u16 glassScale : 4;\n  _.ubit(\"glassScale\", 4),\n  //     u16 glassY : 5;\n  _.ubit(\"glassY\", 5),\n\n  //     // at 0x32\n  //     u16 mustacheType : 2;\n  _.ubit(\"mustacheType\", 2),\n  //     u16 beardType : 2;\n  _.ubit(\"beardType\", 2),\n  //     u16 beardColor : 3;\n  _.ubit(\"beardColor\", 3),\n  //     u16 beardScale : 4;\n  _.ubit(\"beardScale\", 4),\n  //     u16 beardY : 5;\n  _.ubit(\"beardY\", 5),\n\n  //     // at 0x34\n  //     u16 moleType : 1;\n  _.ubit(\"moleType\", 1),\n  //     u16 moleScale : 4;\n  _.ubit(\"moleScale\", 4),\n  //     u16 moleY : 5;\n  _.ubit(\"moleY\", 5),\n  //     u16 moleX : 5;\n  _.ubit(\"moleX\", 5),\n  //     u16 padding8 : 1;\n  _.ubit(\"padding_8\", 1),\n\n  //     wchar_t creatorName[RFL_CREATOR_LEN]; // at 0x36\n  _.char16be(\"creatorName\", 0x14),\n  // } RFLiCharData;\n]);\n\nexport const RFLStoreData = _.struct(\"RFLStoreData\", [\n  _.struct([RFLCharData]),\n  _.uint16(\"checksum\"),\n]) as Struct;\n\nexport type RFLStoreData = {\n  RFLCharData: RFLCharData;\n  checksum: number;\n};\nexport type RFLCharData = {\n  padding0: number;\n  gender: number;\n  birthMonth: number;\n  birthDay: number;\n  favoriteColor: number;\n  favorite: number;\n  name: string;\n  height: number;\n  build: number;\n  create_id: object;\n  faceType: number;\n  faceColor: number;\n  faceTex: number;\n  padding_2: number;\n  localonly: number;\n  type: number;\n  hairType: number;\n  hairColor: number;\n  hairFlip: number;\n  padding_3: number;\n  eyebrowType: number;\n  eyebrowRotate: number;\n  padding_4: number;\n  eyebrowColor: number;\n  eyebrowScale: number;\n  eyebrowY: number;\n  eyebrowX: number;\n  eyeType: number;\n  eyeRotate: number;\n  eyeY: number;\n  eyeColor: number;\n  eyeScale: number;\n  eyeX: number;\n  padding_5: number;\n  noseType: number;\n  noseScale: number;\n  noseY: number;\n  padding_6: number;\n  mouthType: number;\n  mouthColor: number;\n  mouthScale: number;\n  mouthY: number;\n  glassType: number;\n  glassColor: number;\n  glassScale: number;\n  glassY: number;\n  mustacheType: number;\n  beardType: number;\n  beardColor: number;\n  beardScale: number;\n  beardY: number;\n  moleType: number;\n  moleScale: number;\n  moleY: number;\n  moleX: number;\n  padding_8: number;\n  creatorName: string;\n};\n",
    "import type { Ver3StoreData } from \"../../types/struct/FFLStoreData\";\nimport { RFLStoreData } from \"../../types/struct/RFLStoreData\";\nimport { parseHexOrB64TextStringToUint8Array } from \"../../util/parseString\";\n\n// UNFINISHED\nexport const Ver3ToVer1EyeType = [\n  // Wii eye types\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47,\n  // 3DS/Wii U eye types\n  // closest hand picked guess\n\n  38 /* 48 */, 37 /* 49 */, 36 /* 50 */, 7 /* 51 */, 31 /* 52 */, 37 /* 53 */,\n  0 /* 54 */, 15 /* 55 */, 38 /* 56 */, 32 /* 57 */, 37 /* 58 */, 0 /* 59 */,\n];\n\n// do not rely on this working as it doesn't backport ver3 specific fields to rfl properly\nexport function Ver3DataToVer1(ver3: Ver3StoreData) {\n  const rsd = RFLStoreData.unpack(\n    parseHexOrB64TextStringToUint8Array(\"0\".repeat(76 * 2))\n  ) as RFLStoreData;\n\n  const charData = rsd.RFLCharData;\n\n  charData.padding0 = ver3.padding_0;\n  charData.gender = ver3.gender;\n  charData.birthMonth = ver3.birth_month;\n  charData.birthDay = ver3.birth_day;\n  charData.favoriteColor = ver3.favorite_color;\n  charData.favorite = ver3.favorite;\n  charData.name = ver3.name;\n  charData.height = ver3.height;\n  charData.build = ver3.build;\n  charData.create_id = ver3.create_id;\n  charData.faceType = ver3.face_type;\n  charData.faceColor = ver3.face_color;\n  charData.faceTex = ver3.face_make;\n  charData.padding_2 = ver3.padding_2;\n  charData.localonly = ver3.localonly;\n  charData.type = ver3.create_id.flag_normal;\n  charData.hairType = ver3.hair_type;\n  charData.hairColor = ver3.hair_color;\n  charData.hairFlip = ver3.hair_flip;\n  charData.padding_3 = ver3.padding_3;\n  charData.eyebrowType = ver3.eyebrow_type;\n  charData.eyebrowRotate = ver3.eyebrow_rotate;\n  charData.padding_4 = ver3.padding_4;\n  charData.eyebrowColor = ver3.eyebrow_color;\n  charData.eyebrowScale = ver3.eyebrow_scale;\n  charData.eyebrowY = ver3.eyebrow_y;\n  charData.eyebrowX = ver3.eyebrow_x;\n  charData.eyeType = ver3.eye_type;\n  charData.eyeRotate = ver3.eye_rotate;\n  charData.eyeY = ver3.eye_y;\n  charData.eyeColor = ver3.eye_color;\n  charData.eyeScale = ver3.eye_scale;\n  charData.eyeX = ver3.eye_x;\n  charData.padding_5 = ver3.padding_5;\n  charData.noseType = ver3.nose_type;\n  charData.noseScale = ver3.nose_scale;\n  charData.noseY = ver3.nose_y;\n  charData.padding_6 = ver3.padding_6;\n  charData.mouthType = ver3.mouth_type;\n  charData.mouthColor = ver3.mouth_color;\n  charData.mouthScale = ver3.mouth_scale;\n  charData.mouthY = ver3.mouth_y;\n  charData.glassType = ver3.glasses_type;\n  charData.glassColor = ver3.glasses_color;\n  charData.glassScale = ver3.glasses_scale;\n  charData.glassY = ver3.glass_y;\n  charData.mustacheType = ver3.mustache_type;\n  charData.beardType = ver3.beard_type;\n  charData.beardColor = ver3.beard_color;\n  charData.beardScale = ver3.beard_scale;\n  charData.beardY = ver3.beard_y;\n  charData.moleType = ver3.mole_type;\n  charData.moleScale = ver3.mole_scale;\n  charData.moleY = ver3.mole_y;\n  charData.moleX = ver3.mole_x;\n  charData.padding_8 = ver3.padding_8;\n  charData.creatorName = ver3.creator;\n\n  return RFLStoreData.pack(rsd);\n}\n",
    "import _ from \"./lib/struct-fu/lib\";\nimport Html from \"@datkat21/html\";\nimport { Slider } from \"./components/Slider\";\nimport { GenericType } from \"./types/GenericType\";\nimport { Select } from \"./components/Select\";\nimport { NnMiiCharInfo } from \"./types/struct/NnMiiCharInfo\";\nimport {\n  dataToHex,\n  parseHexOrB64TextStringToUint8Array,\n} from \"./util/parseString\";\nimport { Header, Subheader } from \"./components/Header\";\nimport { propsToComponentCollection } from \"./util/propsToComponentCollection\";\nimport { CharInfoProps } from \"./util/CharInfoProps\";\nimport { String } from \"./components/String\";\nimport {\n  bodyList,\n  originList,\n  shaderList,\n  viewList,\n} from \"./util/rendererPropLists\";\nimport { Ver3StoreData } from \"./types/struct/FFLStoreData\";\nimport { RFLCharData, RFLStoreData } from \"./types/struct/RFLStoreData\";\nimport { Ver3DataToVer1 } from \"./lib/conversion/Ver3ToVer1\";\n\n// test structs in window for debugging\nVer3StoreData;\nRFLCharData;\nRFLStoreData;\n//@ts-expect-error\nwindow.Ver3DataToVer1 = Ver3DataToVer1;\n\nnew Html(\"span\")\n  .class(\"small\")\n  .style({ position: \"fixed\", top: \"2vmax\", left: \"3vmax\", opacity: \"0.4\" })\n  .text(\"Switch CharInfo editor by kat21\")\n  .appendTo(\"body\");\n\nlet leftContainer = new Html(\"div\").class(\"left-col\").appendTo(\"body\");\nlet rightContainer = new Html(\"div\").class(\"right-col\").appendTo(\"body\");\n\nlet image = new Html(\"img\")\n  .style({ width: \"420px\", height: \"420px\", \"object-fit\": \"contain\" })\n  .appendTo(leftContainer);\n\nlet dataBox = new Html(\"textarea\")\n  .attr({ rows: 4, cols: 60 })\n  .on(\"input\", (e) => {\n    try {\n      mii = NnMiiCharInfo.unpack(\n        parseHexOrB64TextStringToUint8Array(dataBox.getValue())\n      );\n    } catch (e) {}\n    render(false);\n  })\n  .appendTo(leftContainer);\n\nvar mii = NnMiiCharInfo.unpack(\n  parseHexOrB64TextStringToUint8Array(\n    \"7C06FA4EF33C09E49286729A98DF0F574A00610073006D0069006E0065000000000000000000000B011C370000090000017B01002108070303020E0D08040607060C0000041E1301040D06000004100310070B00010C1B00\"\n    // \"dd2102ee1bce8996807e6f5216c652734d00690069000000000000000000000000000000000000000040400000000000002101000208040304020c0601040306020a010409171304030d000000040a0008040a0004021400\"\n  )\n);\n\n//@ts-expect-error\nwindow.mii = mii;\n\nlet params = new URLSearchParams(\n  \"?verifyCharInfo=0&lightXDirection=0&lightYDirection=0&lightZDirection=0\"\n);\n\nfunction render(updateTextBox: boolean = true) {\n  params.set(\"data\", dataToHex(NnMiiCharInfo.pack(mii)));\n  var final = config.origin + config.baseURL + \"?\" + params.toString();\n\n  switch (mii.type) {\n    case 0:\n      params.set(\"pantsColor\", \"gray\");\n      break;\n    case 1:\n      params.set(\"pantsColor\", \"gold\");\n      break;\n  }\n\n  image.attr({\n    src: final,\n  });\n  if (updateTextBox) dataBox.val(dataToHex(NnMiiCharInfo.pack(mii)));\n  if (finalURL) {\n    finalURL.html(final);\n  }\n}\n\nconst config: Record<string, string> = {\n  origin: \"https://mii-renderer.nxw.pw\",\n  baseURL: \"/miis/image.png\",\n};\n\nif (location.hostname === \"localhost\") {\n  config.origin = \"http://localhost:5000\";\n}\n\nfunction Update(\n  prop: string,\n  value: any,\n  isUrl: boolean,\n  returnOnly?: boolean,\n  shouldValidate?: boolean,\n  subProp?: string,\n  isNumber?: boolean,\n  isConfig?: boolean\n) {\n  console.log(\n    `update(prop:`,\n    prop,\n    `value:`,\n    value,\n    `, isUrl:`,\n    isUrl,\n    `, returnOnly: `,\n    returnOnly,\n    `, shouldValidate: `,\n    shouldValidate,\n    `, subProp: `,\n    subProp,\n    \"isConfig\",\n    isConfig\n  );\n  if (isConfig) {\n    if (returnOnly) {\n      return config[prop];\n    }\n    config[prop] = value;\n    render();\n    return;\n  }\n  if (shouldValidate) return params.get(\"verifyCharInfo\");\n  if (returnOnly) {\n    if (subProp !== undefined) {\n      return (mii as any)[prop][subProp];\n    } else {\n      if (isUrl) return Number(params.get(prop));\n      else return (mii as any)[prop];\n    }\n  }\n  if (subProp !== undefined) {\n    console.log(\"subprop found\");\n    // if (isUrl) params.set(prop[subProp], value);\n    if (isNumber) {\n      (mii as any)[prop][subProp] = parseInt(value);\n      console.log(`mii[\"${prop}\"][\"${subProp}\"] =`, parseInt(value));\n    } else {\n      (mii as any)[prop][subProp] = value;\n      console.log(`mii[\"${prop}\"][\"${subProp}\"] =`, value);\n    }\n  } else {\n    if (isUrl) params.set(prop, value);\n    else (mii as any)[prop] = value;\n    console.log(\"no subprop\");\n  }\n\n  render();\n  //HACK: call render twice\n  render();\n}\n\nrender();\n\nvar finalURL = new Html(\"textarea\").attr({ rows: 4 }).style({ width: \"100%\" });\n\nrightContainer.appendMany(\n  Header(\"Generated URL\"),\n  finalURL,\n  Header(\"Renderer\"),\n  Subheader(\"URL\"),\n  Select(\"origin\", originList, Update, true, true),\n  String(\"baseURL\", 0, 100, Update, false, false, true),\n  Subheader(\"Validation\"),\n  Slider(\"verifyCharInfo\", 0, 1, Update, true),\n  Slider(\"verifyCRC16\", 0, 1, Update, true),\n  Subheader(\"Display\"),\n  Select(\"type\", viewList, Update, true),\n  Select(\"shaderType\", shaderList, Update, true),\n  Select(\"bodyType\", bodyList, Update, true),\n  Subheader(\"Headwear\"),\n  Slider(\"headwearIndex\", 0, 9, Update, true),\n  Slider(\"headwearColor\", 0, 12, Update, true, (val) => val - 1),\n  Subheader(\"Rotation\"),\n  Slider(\"characterXRotate\", 0, 359, Update, true),\n  Slider(\"characterYRotate\", 0, 359, Update, true),\n  Slider(\"characterZRotate\", 0, 359, Update, true),\n  Subheader(\"Light Direction\"),\n  Slider(\"lightXDirection\", 0, 359, Update, true),\n  Slider(\"lightYDirection\", 0, 359, Update, true),\n  Slider(\"lightZDirection\", 0, 359, Update, true),\n  Header(\"CharInfo\"),\n  ...propsToComponentCollection(CharInfoProps, Update)\n);\n\n// hack: force a render\nrender();\n"
  ],
  "mappings": "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",
  "debugId": "90FE224CDFA9483E64756E2164756E21",
  "names": []
}